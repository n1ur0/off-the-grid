# Production Docker Compose configuration for Off the Grid platform
# This configuration is optimized for production deployment with proper security,
# monitoring, and performance considerations

version: '3.8'

services:
  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  # FastAPI Backend
  api:
    image: ghcr.io/off-the-grid/api:${IMAGE_TAG:-latest}
    container_name: off_the_grid_api_prod
    restart: unless-stopped
    env_file:
      - production.env
    environment:
      - CONTAINER_ROLE=api
    ports:
      - "8000:8000"
    volumes:
      - api_logs:/var/log/off-the-grid
      - ./ssl/api:/etc/ssl/api:ro
    networks:
      - app_network
      - database_network
      - cache_network
      - monitoring_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=api,environment=production"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Next.js Frontend
  frontend:
    image: ghcr.io/off-the-grid/frontend:${IMAGE_TAG:-latest}
    container_name: off_the_grid_frontend_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.offthegrid.io
      - NEXT_PUBLIC_WS_URL=wss://api.offthegrid.io/ws
    ports:
      - "3000:3000"
    volumes:
      - frontend_logs:/var/log/frontend
    networks:
      - app_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=frontend,environment=production"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # CLI Bot Service
  cli_bot:
    image: ghcr.io/off-the-grid/cli:${IMAGE_TAG:-latest}
    container_name: off_the_grid_cli_bot_prod
    restart: unless-stopped
    env_file:
      - production.env
    environment:
      - CONTAINER_ROLE=matcher_bot
      - RUST_LOG=info
    volumes:
      - cli_data:/app/data
      - cli_logs:/var/log/cli
      - ./config/node_config.json:/app/node_config.json:ro
      - ./config/matcher_config.json:/app/matcher_config.json:ro
    networks:
      - app_network
      - external_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "/app/off-the-grid", "scans", "status"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=cli_bot,environment=production"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================

  # PostgreSQL Primary Database
  postgres:
    image: postgres:14-alpine
    container_name: off_the_grid_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: off_the_grid
      POSTGRES_USER: off_the_grid_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./database/production-init:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
      - ./ssl/postgres:/var/lib/postgresql/ssl:ro
    ports:
      - "5432:5432"
    networks:
      - database_network
    command: |
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U off_the_grid_user -d off_the_grid"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=postgres,environment=production"
    security_opt:
      - no-new-privileges:true

  # PostgreSQL Read Replica (optional)
  postgres_replica:
    image: postgres:14-alpine
    container_name: off_the_grid_postgres_replica_prod
    restart: unless-stopped
    environment:
      PGUSER: replicator
      POSTGRES_PASSWORD: ${DB_REPLICA_PASSWORD}
      PGPASSWORD: ${DB_REPLICA_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./ssl/postgres:/var/lib/postgresql/ssl:ro
    networks:
      - database_network
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - replica

  # Redis Primary
  redis:
    image: redis:7-alpine
    container_name: off_the_grid_redis_prod
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: |
      redis-server
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
      --protected-mode yes
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - cache_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=redis,environment=production"
    security_opt:
      - no-new-privileges:true

  # Redis Sentinel for High Availability
  redis_sentinel:
    image: redis:7-alpine
    container_name: off_the_grid_redis_sentinel_prod
    restart: unless-stopped
    volumes:
      - ./config/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    networks:
      - cache_network
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - ha

  # =============================================================================
  # REVERSE PROXY AND LOAD BALANCER
  # =============================================================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: off_the_grid_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/nginx:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - static_files:/var/www/static:ro
    networks:
      - app_network
      - external_network
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=nginx,environment=production"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # =============================================================================
  # MONITORING AND OBSERVABILITY
  # =============================================================================

  # Prometheus (moved from monitoring docker-compose)
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: off_the_grid_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    profiles:
      - monitoring

  # Grafana (moved from monitoring docker-compose)
  grafana:
    image: grafana/grafana:10.2.3
    container_name: off_the_grid_grafana_prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    profiles:
      - monitoring

  # =============================================================================
  # BACKUP AND MAINTENANCE
  # =============================================================================

  # Database Backup Service
  db_backup:
    image: postgres:14-alpine
    container_name: off_the_grid_backup_prod
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - ./scripts/backup_database.sh:/backup_database.sh:ro
      - backup_temp:/tmp/backups
    networks:
      - database_network
    command: /backup_database.sh
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup

  # Redis Backup Service
  redis_backup:
    image: redis:7-alpine
    container_name: off_the_grid_redis_backup_prod
    restart: "no"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - ./scripts/backup_redis.sh:/backup_redis.sh:ro
      - backup_temp:/tmp/backups
    networks:
      - cache_network
    command: /backup_redis.sh
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - backup

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  # Vulnerability Scanner
  vulnerability_scanner:
    image: aquasec/trivy:latest
    container_name: off_the_grid_scanner_prod
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/scan_results:/results
    command: |
      sh -c "
      trivy image --format json --output /results/api_scan.json ghcr.io/off-the-grid/api:${IMAGE_TAG:-latest}
      trivy image --format json --output /results/frontend_scan.json ghcr.io/off-the-grid/frontend:${IMAGE_TAG:-latest}
      trivy image --format json --output /results/cli_scan.json ghcr.io/off-the-grid/cli:${IMAGE_TAG:-latest}
      "
    profiles:
      - security

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  # Internal application network
  app_network:
    driver: bridge
    name: off_the_grid_app_prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # Database network (restricted)
  database_network:
    driver: bridge
    name: off_the_grid_db_prod
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # Cache network (restricted)
  cache_network:
    driver: bridge
    name: off_the_grid_cache_prod
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16

  # Monitoring network
  monitoring_network:
    driver: bridge
    name: off_the_grid_monitoring_prod
    ipam:
      config:
        - subnet: 172.23.0.0/16

  # External network (for services that need internet access)
  external_network:
    driver: bridge
    name: off_the_grid_external_prod

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  # Database volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres_replica
  
  # Cache volumes
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis

  # Application volumes
  cli_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/cli
  static_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/static

  # Log volumes
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/api
  frontend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/frontend
  cli_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/cli
  postgres_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/postgres
  redis_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/off-the-grid/nginx

  # Monitoring volumes
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/grafana

  # Backup volumes
  backup_temp:
    driver: local

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Production deployment:
# docker-compose -f docker-compose.production.yml --profile monitoring up -d

# With high availability:
# docker-compose -f docker-compose.production.yml --profile monitoring --profile ha up -d

# Run backups:
# docker-compose -f docker-compose.production.yml --profile backup up db_backup redis_backup

# Security scanning:
# docker-compose -f docker-compose.production.yml --profile security up vulnerability_scanner

# Scale API service:
# docker-compose -f docker-compose.production.yml up -d --scale api=3

# View logs:
# docker-compose -f docker-compose.production.yml logs -f api
# docker-compose -f docker-compose.production.yml logs -f postgres

# Update services (zero-downtime):
# docker-compose -f docker-compose.production.yml pull
# docker-compose -f docker-compose.production.yml up -d --no-deps api
# docker-compose -f docker-compose.production.yml up -d --no-deps frontend